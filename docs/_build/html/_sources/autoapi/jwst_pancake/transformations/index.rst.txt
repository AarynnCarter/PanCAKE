:py:mod:`jwst_pancake.transformations`
======================================

.. py:module:: jwst_pancake.transformations


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   jwst_pancake.transformations.cart_to_polar
   jwst_pancake.transformations.polar_to_cart
   jwst_pancake.transformations.affine_transform
   jwst_pancake.transformations.rotate
   jwst_pancake.transformations.align_fourierLSQ
   jwst_pancake.transformations.shift_subtract
   jwst_pancake.transformations.fourier_imshift



.. py:function:: cart_to_polar(xy)

   convert separations into offset, theta


.. py:function:: polar_to_cart(r, theta)

   convert from polar to cartesian,
   assuming theta in degrees


.. py:function:: affine_transform(theta, center)

   theta = deg
   center = x, y


.. py:function:: rotate(xy, theta, center)


.. py:function:: align_fourierLSQ(reference, target, mask=None)

   LSQ optimization with Fourier shift alignment

   Parameters:
       reference : nd array
           N x K image to be aligned to
       target : nd array
           N x K image to align to reference
       mask : nd array, optional
           N x K image indicating pixels to ignore when
           performing the minimization. The masks acts as
           a weighting function in performing the fit.

   Returns:
       results : list
           [x, y, beta] values from LSQ optimization, where (x, y) 
           are the misalignment of target from reference and beta
           is the fraction by which the target intensity must be
           reduced to match the intensity of the reference.


.. py:function:: shift_subtract(params, reference, target, mask=None)

   Use Fourier Shift theorem for subpixel shifts.

   Parameters:
       params : tuple
           xshift, yshift, beta
       reference : nd array
           See align_fourierLSQ
       target : nd array
           See align_fourierLSQ
       mask : nd array, optional
           See align_fourierLSQ

   Returns:
       1D nd array of target-reference residual after
       applying shift and intensity fraction.


.. py:function:: fourier_imshift(image, xshift, yshift)

   Shift an image by use of Fourier shift theorem

   Parameters:
       image : nd array
           N x K image
       xshift : float
           Pixel value by which to shift image in the x direction
       yshift : float
           Pixel value by which to shift image in the y direction

   Returns:
       offset : nd array
           Shifted image



