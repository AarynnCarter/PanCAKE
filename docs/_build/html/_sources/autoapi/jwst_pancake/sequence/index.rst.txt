:py:mod:`jwst_pancake.sequence`
===============================

.. py:module:: jwst_pancake.sequence


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   jwst_pancake.sequence.Sequence



Functions
~~~~~~~~~

.. autoapisummary::

   jwst_pancake.sequence.load_run



.. py:class:: Sequence(**kwargs)

   .. py:method:: add_observation(self, scene, exposures, mode='coronagraphy', nircam_mask='default', nircam_subarray='default', miri_subarray='default', telescope='jwst', optimise_margin=0.05, optimize_margin=None, max_sat=0.95, rolls=None, nircam_sgd=None, miri_sgd=None, scale_exposures=None, verbose=True)


   .. py:method:: run(self, ta_error='saved', wavefront_evolution=True, on_the_fly_PSFs=False, wave_sampling=3, save_file=False, resume=False, verbose=True, cache='none', cache_path='default', offaxis_nircam=[1, 1], offaxis_miri=[1, 1], debug_verbose=False, initial_wavefront_realisation=3)


   .. py:method:: _relative_exposure_time(self, scene, filt, master_scene, master_exposure_time=3600)


   .. py:method:: _extract_readout(self, scene, exposure, subarray, obs_dict, optimise_margin, scale_exposures, max_sat, verbose=True)


   .. py:method:: _calculate_opds(self, opd_estimate='requirements', opd_realisation=1, pa_range='median')

      We want to calculate a range of optical path difference (OPD) maps dependent on how the observatory
      moves throughout the sequenced observations. 


   .. py:method:: _get_geom_props(self, pa_range='median')


   .. py:method:: _find_ra_dec(self, obs_dict)


   .. py:method:: _slew_angdist_to_time(self, slew_angdist)


   .. py:method:: _get_ordered_scene_names(self, duplicates=True)



.. py:function:: load_run(save_file)


