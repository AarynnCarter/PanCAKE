:py:mod:`pancake.opds`
======================

.. py:module:: pancake.opds

.. autoapi-nested-parse::

   ALL CODE BELOW IS FROM JARRON LEISENRING
   https://github.com/JarronL/pynrc/blob/develop/pynrc/opds.py



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pancake.opds.OTE_WFE_Drift_Model



Functions
~~~~~~~~~

.. autoapisummary::

   pancake.opds.OPDFile_to_HDUList
   pancake.opds.plot_im
   pancake.opds.plot_opd



Attributes
~~~~~~~~~~

.. autoapisummary::

   pancake.opds.opd_default
   pancake.opds.on_rtd
   pancake.opds.opd_dir


.. py:data:: opd_default
   :annotation: = ['OPD_RevW_ote_for_NIRCam_requirements.fits', 0]

   

.. py:data:: on_rtd
   

   

.. py:data:: opd_dir
   

   

.. py:function:: OPDFile_to_HDUList(file, slice_to_use=0)

   Make a picklable HDUList for ingesting into multiproccessor WebbPSF
   helper function.


.. py:class:: OTE_WFE_Drift_Model(**kwargs)

   Bases: :py:obj:`webbpsf.opds.OTE_Linear_Model_WSS`

   OPD subclass for calculating OPD drift values over time.

   .. py:method:: reset(self, verbose=True)

      Reset an OPD to the state it was loaded from disk.
      i.e. undo all segment moves.


   .. py:method:: _calc_delta_opds(self, thermal=True, frill=True, iec=True)

      Calculate delta OPDs for the three components and save to
      class properties. Each delta OPD image will be normalized
      such that the nm RMS WFE is equal to 1.



   .. py:method:: calc_rms(self, arr, segname=None)

      Calculate RMS of input images


   .. py:method:: slew_scaling(self, start_angle, end_angle)

      WFE scaling due to slew angle

      Scale the WSS Hexike components based on slew pitch angles.

      Parameters
      ----------
      start_angle : float
          The starting sun pitch angle, in degrees between -5 and +45
      end_angle : float
          The ending sun pitch angle, in degrees between -5 and +45


   .. py:method:: gen_frill_drift(self, delta_time, start_angle=-5, end_angle=45, case='BOL')

      Frill WFE drift scaling

      Function to determine the factor to scale the delta OPD associated with
      frill tensioning. Returns the RMS WFE (nm) depending on time and slew
      angles.

      Parameters
      ----------
      delta_time : astropy.units quantity object
          The time since a slew occurred.
      start_angle : float
          The starting sun pitch angle, in degrees between -5 and +45
      end_angle : float
          The ending sun pitch angle, in degrees between -5 and +45
      case : string
          either "BOL" for current best estimate at beginning of life, or
          "EOL" for more conservative prediction at end of life. The amplitude
          of the frill drift is roughly 2x lower for BOL (8.6 nm after 2 days)
          versus EOL (18.4 nm after 2 days).


   .. py:method:: gen_thermal_drift(self, delta_time, start_angle=-5, end_angle=45, case='BOL')

      Thermal WFE drift scaling

      Function to determine the factor to scale the delta OPD associated with
      OTE backplane thermal distortion. Returns the RMS WFE (nm) depending on
      time and slew angles.

      Parameters
      ----------
      delta_time : astropy.units quantity object
          The time since a slew occurred.
      start_angle : float
          The starting sun pitch angle, in degrees between -5 and +45
      end_angle : float
          The ending sun pitch angle, in degrees between -5 and +45
      case : string
          either "BOL" for current best estimate at beginning of life, or
          "EOL" for more conservative prediction at end of life. The amplitude
          of the frill drift is roughly 3x lower for BOL (13 nm after 14 days)
          versus EOL (43 nm after 14 days).


   .. py:method:: gen_iec_series(self, delta_time, amplitude=3.5, period=5.0, interp_kind='linear', random_seed=None)

      Create a series of IEC WFE scale factors

      Create a series of random IEC heater state changes based on
      arcsine distribution.

      Parameters
      ----------
      delta_time : astropy.units quantity object array
          Time series of atropy units to interpolate IEC amplitudes

      Keyword Args
      ------------
      amplitude : float
          Full amplitude of arcsine distribution. Values will range
          from -0.5*amplitude to +0.5*amplitude.
      period : float
          Period in minutes of IEC oscillations. Usually 3-5 minutes.
      random_seed : int
          Provide a random seed value between 0 and (2**32)-1 to generate
          reproducible random values.
      interp_kind : str or int
          Specifies the kind of interpolation as a string
          ('linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',
          'previous', 'next', where 'zero', 'slinear', 'quadratic' and 'cubic'
          refer to a spline interpolation of zeroth, first, second or third
          order; 'previous' and 'next' simply return the previous or next value
          of the point) or as an integer specifying the order of the spline
          interpolator to use.
          Default is 'linear'.


   .. py:method:: gen_delta_opds(self, delta_time, start_angle=-5, end_angle=45, do_thermal=True, do_frill=True, do_iec=True, case='BOL', return_wfe_amps=True, return_dopd_fin=True, **kwargs)

      Create series of delta OPDs

      Generate a series of delta OPDS, the result of which is
      a combination of thermal, frill, and IEC effects. The
      thermal and frill values are dependent on time, start/end
      slew angles, and case ('BOL' or 'EOL'). Delta OPD contributions
      from the IEC heater switching are treated as random state
      switches assuming an arcsine distribution.

      Parameters
      ----------
      delta_time : astropy.units quantity object
          An array of times assuming astropy units.
      start_angle : float
          The starting sun pitch angle, in degrees between -5 and +45.
      end_angle : float
          The ending sun pitch angle, in degrees between -5 and +45.
      case : string
          Either "BOL" for current best estimate at beginning of life, or
          "EOL" for more conservative prediction at end of life.
      do_thermal : bool
          Include thermal slew component? Mostly for debugging purposes.
      do_frill : bool
          Include frill component? Mostly for debugging purposes.
      do_iec : bool
          Include IEC component? Good to exclude if calling this function
          repeatedly for evolution of multiple slews, then add IEC later.
      return_wfe_amps : bool
          Return a dictionary that provides the RMS WFE (nm) of each
          component at each time step.
      return_dopd_fin : bool
          Option to exclude calculating final delta OPD in case we only
          want the final RMS WFE dictionary.


   .. py:method:: evolve_dopd(self, delta_time, slew_angles, case='BOL', return_wfe_amps=True, return_dopd_fin=True, do_thermal=True, do_frill=True, do_iec=True, **kwargs)

      Evolve the delta OPD with multiple slews

      Input an array of `delta_time` and `slew_angles` to return the
      evolution of a delta_OPD image. Option to return the various
      WFE components, including OTE backplane (thermal), frill tensioning,
      and IEC heater switching.

      Parameters
      ----------
      delta_time : astropy.units quantity object
          An array of times assuming astropy units.
      slew_angles : ndarray
          The sun pitch angles, in degrees between -5 and +45.
      case : string
          Either "BOL" for current best estimate at beginning of life, or
          "EOL" for more conservative prediction at end of life.
      do_thermal : bool
          Include thermal slew component? Mostly for debugging purposes.
      do_frill : bool
          Include frill component? Mostly for debugging purposes.
      do_iec : bool
          Include IEC component? Good to exclude if calling this function
          repeatedly for evolution of multiple slews, then add IEC later.
      return_wfe_amps : bool
          Return a dictionary that provides the RMS WFE (nm) of each
          component at each time step.
      return_dopd_fin : bool
          Option to exclude calculating final delta OPD in case we only
          want the final RMS WFE dictionary.

      Keyword Args
      ------------
      amplitude : float
          Full amplitude of IEC arcsine distribution. Values will range
          from -0.5*amplitude to +0.5*amplitude.
      period : float
          Period in minutes of IEC oscillations. Usually 3-5 minutes.


   .. py:method:: interp_dopds(self, delta_time, dopds, dt_new, wfe_dict=None, interp_kind='linear', **kwargs)

      Interpolate an array of delta OPDs
      Perform a linear interpolation on a series of delta OPDS.
      Parameters
      ----------
      delta_time : astropy.units quantity object
          An array of times assuming astropy units corresponding to each `dopd`.
      dopds : ndarray
          Array of delta OPD images associated with `delta_time`.
      dt_new : astropy.units quantity object
          New array to interpolate onto.
      Keyword Args
      ------------
      wfe_dict : dict or None
          If specified, then must provide a dictionary where the values
          for each keywords are the WFE drift components associated with
          each `delta_time`. Will then return a dictionary
      interp_kind : str or int
          Specifies the kind of interpolation as a string
          ('linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic',
          'previous', 'next', where 'zero', 'slinear', 'quadratic' and 'cubic'
          refer to a spline interpolation of zeroth, first, second or third
          order; 'previous' and 'next' simply return the previous or next value
          of the point) or as an integer specifying the order of the spline
          interpolator to use.
          Default is 'linear'.


   .. py:method:: slew_pos_averages(self, delta_time, slew_angles, opds=None, wfe_dict=None, mn_func=np.mean, interpolate=False, **kwargs)

      Get averages at each slew position
      Given a series of times and slew angles, calculate the average OPD and
      WFE RMS error within each slew angle position. Returns a tuple with new
      arrays of (dt_new, opds_new, wfe_dict_new).

      If input both `opds` and `wfe_dict` are not specified, then we call
      the `evolve_dopd` function and return .

      Parameters
      ----------
      delta_time : astropy.units quantity object
          An array of times assuming astropy units.
      slew_angles : ndarray
          The sun pitch angles at each `delta_time`, in degrees between -5 and +45.
      opds : ndarray or None
          Cube of OPD images (or delta OPDs) associated with each `delta_time`.
          If set to None, then a new set of OPDs are not calculated.
      wfe_dict : dict or None
          If specified, then must provide a dictionary where the values
          for each keywords are the WFE drift components associated with
          each `delta_time`. New set of WFE dictionary is not calculated if set
          to None.
      mn_func : function
          Function to use for taking averages. Default: np.mean()
      interpolate : bool
          Instead of taking average, use the interpolation function `self.interp_dopds()`.

      Keyword Args
      ------------
      case : string
          Either "BOL" for current best estimate at beginning of life, or
          "EOL" for more conservative prediction at end of life.
      do_thermal : bool
          Include thermal slew component? Mostly for debugging purposes.
      do_frill : bool
          Include frill component? Mostly for debugging purposes.
      do_iec : bool
          Include IEC component? Good to exclude if calling this function
          repeatedly for evolution of multiple slews, then add IEC later.
      amplitude : float
          Full amplitude of IEC arcsine distribution. Values will range
          from -0.5*amplitude to +0.5*amplitude.
      period : float
          Period in minutes of IEC oscillations. Usually 3-5 minutes.
      kind : str or int
          Specifies the kind of interpolation (if specified) as a string.
          Default: 'linear'.


   .. py:method:: opds_as_hdul(self, delta_time, slew_angles, delta_opds=None, wfe_dict=None, case=None, add_main_opd=True, slew_averages=False, return_ind=None, **kwargs)

      Convert series of delta OPDS to HDUList



.. py:function:: plot_im(im, fig, ax, vlim=None, add_cbar=True, return_ax=False, extent=None)

   Plot single image on some axes


.. py:function:: plot_opd(hdul, index=1, opd0=None, vlim1=None, vlim2=None)

   Plot OPDs images (full and delta)


