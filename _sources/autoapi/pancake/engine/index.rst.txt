:py:mod:`pancake.engine`
========================

.. py:module:: pancake.engine


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pancake.engine.get_template
   pancake.engine.list_templates
   pancake.engine.load_calculation
   pancake.engine.save_calculation
   pancake.engine.save_to_fits
   pancake.engine.get_options
   pancake.engine.calculate_batch
   pancake.engine.calculate_all
   pancake.engine.calculate_target
   pancake.engine.calculate_reference
   pancake.engine.calculate_contrast
   pancake.engine.perform_calculation
   pancake.engine.random_seed
   pancake.engine.process_config
   pancake.engine.calculate_subtracted
   pancake.engine.calculate_contrast_curve



Attributes
~~~~~~~~~~

.. autoapisummary::

   pancake.engine.pandeia_seed
   pancake.engine.PandeiaConvolvedSceneCube
   pancake.engine.default_SPECTRAL_MAX_SAMPLES
   pancake.engine.PandeiaDetectorSignal
   pancake.engine.options
   pancake.engine.latest_on_the_fly_PSF
   pancake.engine.cache_maxsize


.. py:data:: pandeia_seed
   

   

.. py:data:: PandeiaConvolvedSceneCube
   

   

.. py:data:: default_SPECTRAL_MAX_SAMPLES
   

   

.. py:data:: PandeiaDetectorSignal
   

   

.. py:data:: options
   

   

.. py:data:: latest_on_the_fly_PSF
   

   

.. py:data:: cache_maxsize
   :annotation: = 256

   

.. py:function:: get_template(filename)

   Look up a template filename.



.. py:function:: list_templates()

   List all bundled template calculation files.


.. py:function:: load_calculation(filename)


.. py:function:: save_calculation(calcfile, filename)


.. py:function:: save_to_fits(array, filename)


.. py:function:: get_options()

   This returns the options object, and is used to let the various Pandeia-based subclasses get
   the options object currently in use.


.. py:function:: calculate_batch(calcfiles, nprocesses=None)


.. py:function:: calculate_all(raw_config)

   Run a pandeia coronagraphy calculation. Output will be:
       - a pandeia report showing the target
       - a pandeia report showing the reference source
       - a pandeia report showing the unocculted target (with saturation disabled)
   In pandeia 1.3, this can be done as a single calculation, with the results obtained from
   sub-reports. In pandeia 1.2, the sub-reports are not actually returned properly, so the overall
   calculation needs to be run 3 times.


.. py:function:: calculate_target(raw_config)

   Run a pandeia coronagraphy calculation in target-only mode


.. py:function:: calculate_reference(raw_config)

   Run a pandeia coronagraphy calculation in target-only mode, replacing the target scene with
   the scene stored in the coronagraphy strategy PSF subtraction source.


.. py:function:: calculate_contrast(raw_config, offset_x=0.5, offset_y=0.5)

   Run a pandeia coronagraphy calculation in target-only mode, with the target offset to be
   unocculted, and with saturation disabled.


.. py:function:: perform_calculation(calcfile)

   Manually decorate pandeia.engine.perform_calculation to circumvent
   pandeia's tendency to modify the calcfile during the calculation.

   Updates to the saturation computation could go here as well.


.. py:function:: random_seed(self)

   The pandeia engine sets a fixed seed of 42.
   Circumvent that here.


.. py:function:: process_config(raw_config, target_scene, reference_scene)

   Process a variable that might be a file name, full JWST configuration dictionary, or instrument
   configuration dictionary, along with optional target and reference scenes.


.. py:function:: calculate_subtracted(raw_config, target=None, reference=None, ta_error=False, sgd=False, stepsize=0.02)

   This is a function to calculate subtracted images with an optional reference image
   small-grid dither (SGD). It does the following:
       - Create a pandeia configuration file from which to build the target and reference scenes
       - [optional] construct SGD
       - observe target scene
       - for each reference observation:
           - observe reference scene
       - centre reference to targets
       - create klip PSF
       - subtract klip PSF from target image
       - return subtracted image
   It will return:
       - target image
       - list of reference images
       - artificial PSF
       - subtracted image

   Parameters
   ----------
   raw_config: string or dict
       One of:
           - file name of pandeia JSON file describing an observation
           - pandeia configuration dictionary
           - pandeia instrument configuration from configuration dictionary
             (i.e. config['configuration']['instrument'])
   target_scene: list of dict (or dict), default None
       List of Pandeia-style scene dictionaries describing the target. If not present, then the
           target scene from raw_config will be used.
   reference_scene: list of dict (or dict), default None
       List of Pandeia-style scene dictionaries describing the reference source. If not present,
           then the reference scene from raw_config will be used. If a list, only the first
           element will be used (i.e. the reference source will be assumed to be a single element)
   ta_error: bool, default False
       Whether to add target acquisition error offsets to the target and reference scenes.
   sgd: bool, default False
       Whether to create a small-grid dither (SGD) for the reference scene.
   stepsize: float, default 0.02
       Size of the offsets in the SGD (if present), in arcseconds.

   Returns
   -------
   target: numpy array containing <iterations> detector slopes of the target
   references: list of numpy arrays containing <iterations> detector slopes of the reference
   psf: artificial PSF created with klip
   subtracted: numpy array containing <iterations> reference-subtracted target images


.. py:function:: calculate_contrast_curve(raw_config, target=None, reference=None, ta_error=True, iterations=5, keep_options=False)

   This is a replacement for the Pandeia calculate_contrast function. It is designed to use the
   various internal analysis functions to do the following:
       - Load one of the pandeia_coronagraphy custom templates
       - Repeat <iterations> times:
           - Run through pandeia with the target scene in place of the default scene
           - Run through pandeia with the reference scene in place of the default scene
       - Run through pandeia with the off-axis target
       - Generate an aperture image
       - Run the analysis contrast utility method
   It will return:
       - list of target images
       - list of reference images
       - off-axis image
       - list of subtracted images
       - normalized contrast profile (with reference bins)

   Parameters
   ----------
   raw_config: string or dict
       One of:
           - file name of pandeia JSON file describing an observation
           - pandeia configuration dictionary
           - pandeia instrument configuration from configuration dictionary
             (i.e. config['configuration']['instrument'])
   target: list of dict (or dict), default None
       List of Pandeia-style scene dictionaries describing the target. If not present, then the
           target scene from raw_config will be used.
   reference: list of dict (or dict), default None
       List of Pandeia-style scene dictionaries describing the reference source. If not present,
           then the reference scene from raw_config will be used. If a list, only the first
           element will be used (i.e. the reference source will be assumed to be a single element)
   ta_error: bool, default False
       Whether to add target acquisition error offsets to the target and reference scenes.
   iterations: int, default=1
       Number of times to iterate generating TA errors and observing the target and reference
       source

   Returns
   -------
   targets: list of numpy arrays containing <iterations> detector slopes of the target
   references: list of numpy arrays containing <iterations> detector slopes of the reference
   unocculted: numpy array of the detector slopes of the unocculted source
   subtractions: list of numpy arrays containing <iterations> reference-subtracted target images
   contrast: list of numpy arrays containing:
       bins: bins used for the normalized contrast profile
       contrast: normalized contrast profile


