:py:mod:`pancake.analysis`
==========================

.. py:module:: pancake.analysis


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pancake.analysis.enable_runtime_warnings
   pancake.analysis.transmission_corrected
   pancake.analysis.identify_primary_sources
   pancake.analysis.extract_simulated_images
   pancake.analysis.process_simulations
   pancake.analysis.mask_companions
   pancake.analysis.get_companion_mask
   pancake.analysis.meas_contrast_basic
   pancake.analysis.compute_contrast
   pancake.analysis.get_source_properties
   pancake.analysis.companion_snrs
   pancake.analysis.contrast_curve



Attributes
~~~~~~~~~~

.. autoapisummary::

   pancake.analysis.debug


.. py:data:: debug
   :annotation: = True

   

.. py:function:: enable_runtime_warnings(state)

   Function to toggle on/off RuntimeWarning's. Many of these do not impact the functionality of the code
   and therefore can be safely ignored for the vast majority of user cases. As a result, this function is
   immediately called a few lines above.

   Parameters
           state : bool
                   Whether the RuntimeWarning's should be enabled (True), or disabled ( False).
   :returns: None


.. py:function:: transmission_corrected(input_stamp, input_dx, input_dy, filt, mask, mode='multiply')

   Function to apply a 2-dimensional JWST coronagraphic transmission map to an input image.

   Parameters
           input_stamp : 2D ndarray
                   Input image, should have dimensions equal to or smaller than the array for the
                   coronagraphic transmission map.
           input_dx : 2D ndarray
                   Array of X pixel offsets for each element in the array relative to the central pixel of the simulation.
           input_dy : 2D ndarray
                   Array of Y pixel offsets for each element in the array relative to the central pixel of the simulation.
           filt : str
                   JWST filter string, used to obtain offsets for the NIRCam bar masks.
           mask : str
                   JWST coronagraphic mask string, used to identify which transmission map to apply.
           mode : str
                   Whether to 'multiply' or 'divide' the input stamp by the transmission map.
   Returns
           output_stamp : 2D ndarray
                   Equivalent to the input_stamp following the application of the transmission map.


.. py:function:: identify_primary_sources(pancake_results, target, references=None, target_primary_source='default', reference_primary_sources='default')

   Function to identify, or assume, the primary sources (i.e. central 'stars') of output PanCAKE simulation results.

   Parameters
           pancake_results : HDUList
                   Simulated results as returned by pancake.sequence.Sequence().run()
           target : str
                   The provided string name for the target scene in the observation sequence.
           references : str / list of strings / NoneType
                   The provided string name(s) for the reference scene(s) in the observations sequence, if any.
           target_primary_source : str
                   Desired primary source to use for the target scene, or 'default' to assume primary source.
           reference_primary_sources : str / list of strings
                   Desired primary source(s) to use for the reference scene(s), or 'default' to assume primary source(s).
   Returns
           primary_sources : list of strings
                   List of the primary source(s), where the source in the '0' index always corresponds to the target scene.



.. py:function:: extract_simulated_images(pancake_results, observations, primary_sources, all_rolls, references=None, extract_offaxis=False, filename_prefix='image')

   Function to extract a subset of simulated images from the output of a PanCAKE simulation into a more flexible format.

   Parameters
           pancake_results : HDUList
                   Simulated results as returned by pancake.sequence.Sequence().run()
           observations : list of strings
                   List of observation strings that correspond to extension names in the pancake_results HDUList
           primary_sources : list of strings
                   List of the primary source(s) as obtained by identify_primary_sources
           all_rolls : list of ints / floats
                   Which PA roll images to be extracted
           references : str / list of strings / NoneType
                   The provided string name(s) for the reference scene(s) in the observations sequence, if any. Can
                   not be used in conjunction with retrieving simulated target images.
           extract_offaxis : bool
                   Boolean choice of whether to extract offaxis images or not
           filename_prefix : str
                   Simple prefix string used to assign a unique name to each simulated image.
   Returns
           extracted : dict
                   Dictionary containing all requested images, their roll angles, center points, assigned filenames, and
                   if requested, a 20x20 pixel offaxis PSF stamp image and its peak flux.


.. py:function:: process_simulations(pancake_results, target, target_obs, filt, mask, primary_sources, references=None, reference_obs=None, target_rolls='default', reference_rolls='default', subtraction='ADI')

   Function to process a set of desired simulated images from PanCAKE and convert them into pyKLIP datasets to enable easier stellar PSF subtraction
   and contrast curve estimation.

   Parameters
           pancake_results : HDUList
                   Simulated results as returned by pancake.sequence.Sequence().run()
           target : string
                   The provided string name for the target scene in the observation sequence
           target_obs : list of stings
                   List of target observation strings that correspond to extension names in the pancake_results HDUList
           filt : string
                   JWST filter string
           mask : string
                   JWST coronagraphic mask string
           primary_sources : list of strings
                   List of the primary source(s) as obtained by identify_primary_sources
           references : list of strings
                   The provided string name(s) for the reference scene(s) in the observations sequence, if any.
           reference_obs : list of strings
                   List of target observation strings that correspond to extension names in the pancake_results HDUList, if any.
           target_rolls : list of ints / floats
                   Which target PA roll images to use. Alternatively, 'default' to use all of them for ADI modes, or roll=0 for RDI.
           reference_rolls : list of ints / floats
                   Which reference PA roll images to use. Alternatively, 'default' to use all of them for ADI modes, or roll=0 for RDI.
           subtraction : str
                   pyKLIP compatible subtraction string, available options are 'ADI', 'RDI', or 'ADI+RDI'
   Returns
           processed_output : dict
                   Dictionary output containing pyKLIP datasets for the target and PSF library (if necessary), in addition
                   to some information on the offaxis simulation for normalisation / planet injection purposes.


.. py:function:: mask_companions(image_array, companion_xy, mask_radius=7)

   Function apply NaN masks to a number of images at the location of known companion objects.

   Parameters
           image_array : 3D ndarray
                   Numpy array of input images
           companion_xy : iterator of tuples
                   zip() tuples, with each containing the companion x and y *pixel* locations.
           mask_radius : float
                   The desired mask radius in pixels.
   Returns
           masked_images : 3D ndarray
                   Numpy array of output, companion masked images.


.. py:function:: get_companion_mask(companion_xy, mask_dataset, mask_psflib, offaxis_psf_stamp, center=[0, 0], filt='f444w', mask='mask335r', annuli=1, subsections=1, numbasis=25, movement=1, subtraction='ADI', outputdir='./RESULTS/')

   Function to create a mask that can be applied to an image in order to "block" any pixels that correspond to the emitted flux of a companion object.
   In essence, the function uses an offaxis PSF to inject companions into the image, on top of where they already exist, except at a *very* high flux.
   This image can then be processed via KLIP to identify the pixels in the resultant subtracted image which are most impacted by the presence of
   the companion object, and assign them to be masked. This offers significant improvements over a simplistic circular mask due to the lobes of the
   JWST PSF, particularly for the NIRCam filters. Main current drawback is it only masks excess flux from companions, and misses ADI oversubtractions.



.. py:function:: meas_contrast_basic(dat, iwa, owa, resolution, center=None, low_pass_filter=True)

   Duplicate of the meas_contrast funciton within pyKLIP, except calculating a
   standard 5 sigma limit instead of small sample statistics corrections.



.. py:function:: compute_contrast(subtracted_hdu_file, filt, mask, offaxis_psf_stamp, offaxis_flux, raw_input_dataset, raw_input_psflib, primary_vegamag=0, pixel_scale=0.063, annuli=1, subsections=1, numbasis=25, movement=1, subtraction='ADI', companion_xy=None, verbose=True, outputdir='./RESULTS/', plot_klip_throughput=False)

   Function to compute contrast curves from a pyKLIP subtracted image file. Contrast curves will be corrected for both the coronagraphic and KLIP throughput,
   in addition to being converted to relative, and absolute magnitude sensitivity limits.

   Parameters
           subtracted_hdu_file : str
                   Filename for a subtracted image file as produced by pyklip.parallelized.klip_dataset()
           filt : str
                   JWST filter string
           mask : str
                   JWST coronagraphic mask string
           offaxis_psf_stamp : 2D ndarray
                   Stamp image of an offaxis (i.e. not underneath the coronagraph) PSF
           offaxis_flux : float
                   Peak flux of the offaxis PSF
           raw_input_dataset : pyKLIP Dataset
                   The input target dataset that was used to generate the subtracted_hdu_file. Used many times over for planet injection.
           raw_input_psflib : pyKLIP PSFLibrary
                   The input PSF library dataset that was used to generate the subtracted_hdu_file, if any. Used many times over for planet injection.
           primary_vegamag : float
                   Vega magnitude of the primary source of the target scene in the specified filter.
           pixel_scale : float
                   Pixel scale for this observation.
           annuli : int
                   pyKLIP argument - Annuli to use for KLIP. Can be a number, or a list of 2-element tuples (a, b) specifying the pixel
                   boundaries (a <= r < b) for each annulus
           subsections : int
                   pyKLIP argument - Sections to break each annuli into. Can be a number [integer], or a list of 2-element tuples (a, b)
                   specifying the positon angle boundaries (a <= PA < b) for each section [radians]
           numbasis : int
                   number of KL basis vectors to use (can be a scalar or list like). Length of b If numbasis is [None] the number of KL modes to be
                   used is automatically picked based on the eigenvalues.
           movement : int
                   pyKLIP argument - minimum amount of movement (in pixels) of an astrophysical source to consider using that image for a refernece PSF
           subtraction : str
                   pyKLIP compatible subtraction string, available options are 'ADI', 'RDI', or 'ADI+RDI'
           companion_xy : iterator of tuples
                   zip() tuples, with each containing any companion x and y *pixel* locations.
           verbose : bool
                   Optional argument to turn on (True) or off (False) printed terminal updates.
           outputdir : str
                   Directory to save any temporary or results files.
           plot_klip_throughput : bool
                   Optional argument to plot (True) the calculated KLIP throughput for each image. Primarily for debugging.
   Returns
           all_contrasts : dict
                   Dictionary output of the contrast, relative magnitude sensitivity, absolute magnitude sensitivity and separation. Alternative
                   formats of the separation, the contrast prior to throughput corrections, and the estimated KLIP throughput, are also provided.


.. py:function:: get_source_properties(template_obs, primary_source)


.. py:function:: companion_snrs(subtracted_hdu_file, filt, mask, companion_xy, mask_radius=7)


.. py:function:: contrast_curve(pancake_results, target, references=None, subtraction='ADI', filters='all', masks='all', target_rolls='default', target_primary_source='default', reference_primary_sources='default', reference_rolls='default', klip_annuli=1, klip_subsections=1, klip_numbasis=25, klip_movement=1, get_companion_snrs=True, clean_saved_files=False, outputdir='./RESULTS/', save_prefix='default', verbose=True, plot_contrast=True, plot_klip_throughput=False, save_contrasts=True)


